Python AST (depth 2)
FunctionDef(
    lineno=1,
    col_offset=0,
    end_lineno=4,
    end_col_offset=36,
    name='recursive_fact',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        If(
            lineno=2,
            col_offset=4,
            end_lineno=3,
            end_col_offset=16,
            test=...,
            body=[
                ...,
            ],
            orelse=[],
        ),
        Return(
            lineno=4,
            col_offset=4,
            end_lineno=4,
            end_col_offset=36,
            value=...,
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 1 to 4
def recursive_fact(x):
    if x <= 1:
        return 1
    return x * recursive_fact(x - 1)
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=6,
    col_offset=0,
    end_lineno=11,
    end_col_offset=12,
    name='iterative_fact',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        Assign(
            lineno=7,
            col_offset=4,
            end_lineno=7,
            end_col_offset=15,
            targets=[
                ...,
            ],
            value=...,
            type_comment=None,
        ),
        While(
            lineno=8,
            col_offset=4,
            end_lineno=9,
            end_col_offset=27,
            test=...,
            body=[
                ...,
            ],
            orelse=[],
        ),
        Return(
            lineno=11,
            col_offset=4,
            end_lineno=11,
            end_col_offset=12,
            value=...,
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 6 to 11
def iterative_fact(x):
    i, j = 1, 1
    while i <= x:
        i, j = i + 1, j * i

    return j
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=13, col_offset=0, end_lineno=13, end_col_offset=5, id='print', ctx=Load())
--------------------------------------------------
Python Source
Line number 13, columns 0 to 5
print(recursive_fact(5))
˜˜˜˜˜
--------------------------------------------------
Result
<built-in function print>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=13, col_offset=6, end_lineno=13, end_col_offset=20, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 13, columns 6 to 20
print(recursive_fact(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=13, col_offset=21, end_lineno=13, end_col_offset=22, value=5, kind=None)
--------------------------------------------------
Python Source
Line number 13, columns 21 to 22
print(recursive_fact(5))
                     ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=3, col_offset=15, end_lineno=3, end_col_offset=16, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 3, columns 15 to 16
        return 1
               ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=13,
    col_offset=6,
    end_lineno=13,
    end_col_offset=23,
    func=Name(lineno=13, col_offset=6, end_lineno=13, end_col_offset=20, id='recursive_fact', ctx=Load()),
    args=[Constant(lineno=13, col_offset=21, end_lineno=13, end_col_offset=22, value=5, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 13, columns 6 to 23
print(recursive_fact(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
120
Python AST (depth 2)
Call(
    lineno=13,
    col_offset=0,
    end_lineno=13,
    end_col_offset=24,
    func=Name(lineno=13, col_offset=0, end_lineno=13, end_col_offset=5, id='print', ctx=Load()),
    args=[
        Call(
            lineno=13,
            col_offset=6,
            end_lineno=13,
            end_col_offset=23,
            func=...,
            args=[...],
            keywords=[],
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 13, columns 0 to 24
print(recursive_fact(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=13,
    col_offset=0,
    end_lineno=13,
    end_col_offset=24,
    value=Call(
        lineno=13,
        col_offset=0,
        end_lineno=13,
        end_col_offset=24,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 13, columns 0 to 24
print(recursive_fact(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=14, col_offset=0, end_lineno=14, end_col_offset=5, id='print', ctx=Load())
--------------------------------------------------
Python Source
Line number 14, columns 0 to 5
print(iterative_fact(5))
˜˜˜˜˜
--------------------------------------------------
Result
<built-in function print>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=14, col_offset=6, end_lineno=14, end_col_offset=20, id='iterative_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 14, columns 6 to 20
print(iterative_fact(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<iterative_fact function, line 6>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=14, col_offset=21, end_lineno=14, end_col_offset=22, value=5, kind=None)
--------------------------------------------------
Python Source
Line number 14, columns 21 to 22
print(iterative_fact(5))
                     ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=7, col_offset=11, end_lineno=7, end_col_offset=12, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 7, columns 11 to 12
    i, j = 1, 1
           ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=7, col_offset=14, end_lineno=7, end_col_offset=15, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 7, columns 14 to 15
    i, j = 1, 1
              ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=7,
    col_offset=11,
    end_lineno=7,
    end_col_offset=15,
    elts=[
        Constant(lineno=7, col_offset=11, end_lineno=7, end_col_offset=12, value=1, kind=None),
        Constant(lineno=7, col_offset=14, end_lineno=7, end_col_offset=15, value=1, kind=None),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 7, columns 11 to 15
    i, j = 1, 1
           ˜˜˜˜
--------------------------------------------------
Result
(1, 1)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=7, col_offset=4, end_lineno=7, end_col_offset=5, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 7, columns 4 to 5
    i, j = 1, 1
    ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=7, col_offset=7, end_lineno=7, end_col_offset=8, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 7, columns 7 to 8
    i, j = 1, 1
       ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=7,
    col_offset=4,
    end_lineno=7,
    end_col_offset=15,
    targets=[
        Tuple(
            lineno=7,
            col_offset=4,
            end_lineno=7,
            end_col_offset=8,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=7,
        col_offset=11,
        end_lineno=7,
        end_col_offset=15,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 7, columns 4 to 15
    i, j = 1, 1
    ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(2, 1)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(3, 2)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(4, 6)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(5, 24)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(6, 120)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
While(
    lineno=8,
    col_offset=4,
    end_lineno=9,
    end_col_offset=27,
    test=Compare(
        lineno=8,
        col_offset=10,
        end_lineno=8,
        end_col_offset=16,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Assign(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=27,
            targets=[
                ...,
            ],
            value=...,
            type_comment=None,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 8 to 9
    while i <= x:
        i, j = i + 1, j * i
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=11, col_offset=11, end_lineno=11, end_col_offset=12, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 11, columns 11 to 12
    return j
           ˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=14,
    col_offset=6,
    end_lineno=14,
    end_col_offset=23,
    func=Name(lineno=14, col_offset=6, end_lineno=14, end_col_offset=20, id='iterative_fact', ctx=Load()),
    args=[Constant(lineno=14, col_offset=21, end_lineno=14, end_col_offset=22, value=5, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 14, columns 6 to 23
print(iterative_fact(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
120
Python AST (depth 2)
Call(
    lineno=14,
    col_offset=0,
    end_lineno=14,
    end_col_offset=24,
    func=Name(lineno=14, col_offset=0, end_lineno=14, end_col_offset=5, id='print', ctx=Load()),
    args=[
        Call(
            lineno=14,
            col_offset=6,
            end_lineno=14,
            end_col_offset=23,
            func=...,
            args=[...],
            keywords=[],
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 14, columns 0 to 24
print(iterative_fact(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=14,
    col_offset=0,
    end_lineno=14,
    end_col_offset=24,
    value=Call(
        lineno=14,
        col_offset=0,
        end_lineno=14,
        end_col_offset=24,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 14, columns 0 to 24
print(iterative_fact(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=16, col_offset=7, end_lineno=16, end_col_offset=21, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 16, columns 7 to 21
assert recursive_fact(5) == iterative_fact(5)
       ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=16, col_offset=22, end_lineno=16, end_col_offset=23, value=5, kind=None)
--------------------------------------------------
Python Source
Line number 16, columns 22 to 23
assert recursive_fact(5) == iterative_fact(5)
                      ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
If(
    lineno=2,
    col_offset=4,
    end_lineno=3,
    end_col_offset=16,
    test=Compare(
        lineno=2,
        col_offset=7,
        end_lineno=2,
        end_col_offset=13,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Return(
            lineno=3,
            col_offset=8,
            end_lineno=3,
            end_col_offset=16,
            value=...,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 2 to 3
    if x <= 1:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 11 to 12
    return x * recursive_fact(x - 1)
           ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 15 to 29
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<recursive_fact function, line 1>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 4, columns 30 to 31
    return x * recursive_fact(x - 1)
                              ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 4, columns 34 to 35
    return x * recursive_fact(x - 1)
                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=30,
    end_lineno=4,
    end_col_offset=35,
    left=Name(lineno=4, col_offset=30, end_lineno=4, end_col_offset=31, id='x', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=4, col_offset=34, end_lineno=4, end_col_offset=35, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 4, columns 30 to 35
    return x * recursive_fact(x - 1)
                              ˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 2, columns 7 to 8
    if x <= 1:
       ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 2, columns 12 to 13
    if x <= 1:
            ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=2,
    col_offset=7,
    end_lineno=2,
    end_col_offset=13,
    left=Name(lineno=2, col_offset=7, end_lineno=2, end_col_offset=8, id='x', ctx=Load()),
    ops=[LtE()],
    comparators=[Constant(lineno=2, col_offset=12, end_lineno=2, end_col_offset=13, value=1, kind=None)],
)
--------------------------------------------------
Python Source
Line number 2, columns 7 to 13
    if x <= 1:
       ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=3, col_offset=15, end_lineno=3, end_col_offset=16, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 3, columns 15 to 16
        return 1
               ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=4,
    col_offset=15,
    end_lineno=4,
    end_col_offset=36,
    func=Name(lineno=4, col_offset=15, end_lineno=4, end_col_offset=29, id='recursive_fact', ctx=Load()),
    args=[
        BinOp(
            lineno=4,
            col_offset=30,
            end_lineno=4,
            end_col_offset=35,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 4, columns 15 to 36
    return x * recursive_fact(x - 1)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=4,
    col_offset=11,
    end_lineno=4,
    end_col_offset=36,
    left=Name(lineno=4, col_offset=11, end_lineno=4, end_col_offset=12, id='x', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=4,
        col_offset=15,
        end_lineno=4,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 4, columns 11 to 36
    return x * recursive_fact(x - 1)
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=16,
    col_offset=7,
    end_lineno=16,
    end_col_offset=24,
    func=Name(lineno=16, col_offset=7, end_lineno=16, end_col_offset=21, id='recursive_fact', ctx=Load()),
    args=[Constant(lineno=16, col_offset=22, end_lineno=16, end_col_offset=23, value=5, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 16, columns 7 to 24
assert recursive_fact(5) == iterative_fact(5)
       ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Name(lineno=16, col_offset=28, end_lineno=16, end_col_offset=42, id='iterative_fact', ctx=Load())
--------------------------------------------------
Python Source
Line number 16, columns 28 to 42
assert recursive_fact(5) == iterative_fact(5)
                            ˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<iterative_fact function, line 6>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=16, col_offset=43, end_lineno=16, end_col_offset=44, value=5, kind=None)
--------------------------------------------------
Python Source
Line number 16, columns 43 to 44
assert recursive_fact(5) == iterative_fact(5)
                                           ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=7, col_offset=11, end_lineno=7, end_col_offset=12, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 7, columns 11 to 12
    i, j = 1, 1
           ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=7, col_offset=14, end_lineno=7, end_col_offset=15, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 7, columns 14 to 15
    i, j = 1, 1
              ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=7,
    col_offset=11,
    end_lineno=7,
    end_col_offset=15,
    elts=[
        Constant(lineno=7, col_offset=11, end_lineno=7, end_col_offset=12, value=1, kind=None),
        Constant(lineno=7, col_offset=14, end_lineno=7, end_col_offset=15, value=1, kind=None),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 7, columns 11 to 15
    i, j = 1, 1
           ˜˜˜˜
--------------------------------------------------
Result
(1, 1)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=7, col_offset=4, end_lineno=7, end_col_offset=5, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 7, columns 4 to 5
    i, j = 1, 1
    ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=7, col_offset=7, end_lineno=7, end_col_offset=8, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 7, columns 7 to 8
    i, j = 1, 1
       ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=7,
    col_offset=4,
    end_lineno=7,
    end_col_offset=15,
    targets=[
        Tuple(
            lineno=7,
            col_offset=4,
            end_lineno=7,
            end_col_offset=8,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=7,
        col_offset=11,
        end_lineno=7,
        end_col_offset=15,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 7, columns 4 to 15
    i, j = 1, 1
    ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(2, 1)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(3, 2)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(4, 6)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(5, 24)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 15 to 16
        i, j = i + 1, j * i
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 9, columns 19 to 20
        i, j = i + 1, j * i
                   ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=20,
    left=Name(lineno=9, col_offset=15, end_lineno=9, end_col_offset=16, id='i', ctx=Load()),
    op=Add(),
    right=Constant(lineno=9, col_offset=19, end_lineno=9, end_col_offset=20, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 20
        i, j = i + 1, j * i
               ˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 22 to 23
        i, j = i + 1, j * i
                      ˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 9, columns 26 to 27
        i, j = i + 1, j * i
                          ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=9,
    col_offset=22,
    end_lineno=9,
    end_col_offset=27,
    left=Name(lineno=9, col_offset=22, end_lineno=9, end_col_offset=23, id='j', ctx=Load()),
    op=Mult(),
    right=Name(lineno=9, col_offset=26, end_lineno=9, end_col_offset=27, id='i', ctx=Load()),
)
--------------------------------------------------
Python Source
Line number 9, columns 22 to 27
        i, j = i + 1, j * i
                      ˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Tuple(
    lineno=9,
    col_offset=15,
    end_lineno=9,
    end_col_offset=27,
    elts=[
        BinOp(
            lineno=9,
            col_offset=15,
            end_lineno=9,
            end_col_offset=20,
            left=...,
            op=...,
            right=...,
        ),
        BinOp(
            lineno=9,
            col_offset=22,
            end_lineno=9,
            end_col_offset=27,
            left=...,
            op=...,
            right=...,
        ),
    ],
    ctx=Load(),
)
--------------------------------------------------
Python Source
Line number 9, columns 15 to 27
        i, j = i + 1, j * i
               ˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
(6, 120)
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=8, end_lineno=9, end_col_offset=9, id='i', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 8 to 9
        i, j = i + 1, j * i
        ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=9, col_offset=11, end_lineno=9, end_col_offset=12, id='j', ctx=Store())
--------------------------------------------------
Python Source
Line number 9, columns 11 to 12
        i, j = i + 1, j * i
           ˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Assign(
    lineno=9,
    col_offset=8,
    end_lineno=9,
    end_col_offset=27,
    targets=[
        Tuple(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=12,
            elts=[
                ...,
                ...,
            ],
            ctx=...,
        ),
    ],
    value=Tuple(
        lineno=9,
        col_offset=15,
        end_lineno=9,
        end_col_offset=27,
        elts=[
            ...,
            ...,
        ],
        ctx=...,
    ),
    type_comment=None,
)
--------------------------------------------------
Python Source
Line number 9, columns 8 to 27
        i, j = i + 1, j * i
        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 10 to 11
    while i <= x:
          ˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 8, columns 15 to 16
    while i <= x:
               ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=8,
    col_offset=10,
    end_lineno=8,
    end_col_offset=16,
    left=Name(lineno=8, col_offset=10, end_lineno=8, end_col_offset=11, id='i', ctx=Load()),
    ops=[LtE()],
    comparators=[Name(lineno=8, col_offset=15, end_lineno=8, end_col_offset=16, id='x', ctx=Load())],
)
--------------------------------------------------
Python Source
Line number 8, columns 10 to 16
    while i <= x:
          ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
While(
    lineno=8,
    col_offset=4,
    end_lineno=9,
    end_col_offset=27,
    test=Compare(
        lineno=8,
        col_offset=10,
        end_lineno=8,
        end_col_offset=16,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=[
        Assign(
            lineno=9,
            col_offset=8,
            end_lineno=9,
            end_col_offset=27,
            targets=[
                ...,
            ],
            value=...,
            type_comment=None,
        ),
    ],
    orelse=[],
)
--------------------------------------------------
Python Source
Line numbers 8 to 9
    while i <= x:
        i, j = i + 1, j * i
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=11, col_offset=11, end_lineno=11, end_col_offset=12, id='j', ctx=Load())
--------------------------------------------------
Python Source
Line number 11, columns 11 to 12
    return j
           ˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=16,
    col_offset=28,
    end_lineno=16,
    end_col_offset=45,
    func=Name(lineno=16, col_offset=28, end_lineno=16, end_col_offset=42, id='iterative_fact', ctx=Load()),
    args=[Constant(lineno=16, col_offset=43, end_lineno=16, end_col_offset=44, value=5, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 16, columns 28 to 45
assert recursive_fact(5) == iterative_fact(5)
                            ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=16,
    col_offset=7,
    end_lineno=16,
    end_col_offset=45,
    left=Call(
        lineno=16,
        col_offset=7,
        end_lineno=16,
        end_col_offset=24,
        func=...,
        args=[...],
        keywords=[],
    ),
    ops=[Eq()],
    comparators=[
        Call(
            lineno=16,
            col_offset=28,
            end_lineno=16,
            end_col_offset=45,
            func=...,
            args=[...],
            keywords=[],
        ),
    ],
)
--------------------------------------------------
Python Source
Line number 16, columns 7 to 45
assert recursive_fact(5) == iterative_fact(5)
       ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Assert(
    lineno=16,
    col_offset=0,
    end_lineno=16,
    end_col_offset=45,
    test=Compare(
        lineno=16,
        col_offset=7,
        end_lineno=16,
        end_col_offset=45,
        left=...,
        ops=[...],
        comparators=[
            ...,
        ],
    ),
    msg=None,
)
--------------------------------------------------
Python Source
Line number 16, columns 0 to 45
assert recursive_fact(5) == iterative_fact(5)
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=19,
    col_offset=0,
    end_lineno=25,
    end_col_offset=16,
    name='num_eights',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        Expr(
            lineno=20,
            col_offset=4,
            end_lineno=20,
            end_col_offset=66,
            value=...,
        ),
        If(
            lineno=22,
            col_offset=4,
            end_lineno=25,
            end_col_offset=16,
            test=...,
            body=[
                ...,
            ],
            orelse=[
                ...,
            ],
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 19 to 25
def num_eights(pos):
    """Returns the number of times 8 appears as a digit of pos."""

    if pos:
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
    else:
        return 0
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=27, col_offset=0, end_lineno=27, end_col_offset=5, id='print', ctx=Load())
--------------------------------------------------
Python Source
Line number 27, columns 0 to 5
print(num_eights(851803180801223238358))
˜˜˜˜˜
--------------------------------------------------
Result
<built-in function print>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=27, col_offset=6, end_lineno=27, end_col_offset=16, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 27, columns 6 to 16
print(num_eights(851803180801223238358))
      ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=27, col_offset=17, end_lineno=27, end_col_offset=38, value=851803180801223238358, kind=None)
--------------------------------------------------
Python Source
Line number 27, columns 17 to 38
print(num_eights(851803180801223238358))
                 ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803180801223238358
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803180801223238358
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803180801223238358
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803180801223238358
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180318080122323835
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180318080122323835
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180318080122323835
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180318080122323835
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518031808012232383
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518031808012232383
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518031808012232383
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518031808012232383
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803180801223238
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803180801223238
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803180801223238
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803180801223238
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180318080122323
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180318080122323
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180318080122323
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180318080122323
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518031808012232
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518031808012232
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518031808012232
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518031808012232
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803180801223
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803180801223
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803180801223
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803180801223
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180318080122
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180318080122
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180318080122
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180318080122
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518031808012
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518031808012
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518031808012
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518031808012
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803180801
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803180801
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803180801
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803180801
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180318080
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180318080
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180318080
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180318080
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518031808
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518031808
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518031808
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518031808
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803180
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180318
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180318
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180318
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180318
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518031
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518031
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518031
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518031
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851803
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851803
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851803
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851803
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85180
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85180
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8518
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8518
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8518
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8518
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
851
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
851
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
851
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
851
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
85
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
85
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
85
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 40 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                        ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
85
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 21 to 24
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 27 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                           ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=29,
    left=Name(lineno=23, col_offset=21, end_lineno=23, end_col_offset=24, id='pos', ctx=Load()),
    op=Mod(),
    right=Constant(lineno=23, col_offset=27, end_lineno=23, end_col_offset=29, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 29
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 33 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                 ˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=23,
    col_offset=21,
    end_lineno=23,
    end_col_offset=34,
    left=BinOp(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=29,
        left=...,
        op=...,
        right=...,
    ),
    ops=[Eq()],
    comparators=[Constant(lineno=23, col_offset=33, end_lineno=23, end_col_offset=34, value=8, kind=None)],
)
--------------------------------------------------
Python Source
Line number 23, columns 21 to 34
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                     ˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 17
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=23,
    col_offset=16,
    end_lineno=23,
    end_col_offset=41,
    test=Compare(
        lineno=23,
        col_offset=21,
        end_lineno=23,
        end_col_offset=34,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=23, col_offset=16, end_lineno=23, end_col_offset=17, value=1, kind=None),
    orelse=Constant(lineno=23, col_offset=40, end_lineno=23, end_col_offset=41, value=0, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 16 to 41
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 45 to 55
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<num_eights function, line 19>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 23, columns 56 to 59
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜
--------------------------------------------------
Result
8
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None)
--------------------------------------------------
Python Source
Line number 23, columns 63 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                               ˜˜
--------------------------------------------------
Result
10
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=56,
    end_lineno=23,
    end_col_offset=65,
    left=Name(lineno=23, col_offset=56, end_lineno=23, end_col_offset=59, id='pos', ctx=Load()),
    op=FloorDiv(),
    right=Constant(lineno=23, col_offset=63, end_lineno=23, end_col_offset=65, value=10, kind=None),
)
--------------------------------------------------
Python Source
Line number 23, columns 56 to 65
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                                        ˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Returns the number of times 8 appears as a digit of pos.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=20,
    col_offset=4,
    end_lineno=20,
    end_col_offset=66,
    value=Constant(lineno=20, col_offset=4, end_lineno=20, end_col_offset=66, value='Returns the number of times 8 appears as a digit of pos.', kind=None),
)
--------------------------------------------------
Python Source
Line number 20, columns 4 to 66
    """Returns the number of times 8 appears as a digit of pos."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=22, col_offset=7, end_lineno=22, end_col_offset=10, id='pos', ctx=Load())
--------------------------------------------------
Python Source
Line number 22, columns 7 to 10
    if pos:
       ˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=25, col_offset=15, end_lineno=25, end_col_offset=16, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 25, columns 15 to 16
        return 0
               ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=23,
    col_offset=45,
    end_lineno=23,
    end_col_offset=66,
    func=Name(lineno=23, col_offset=45, end_lineno=23, end_col_offset=55, id='num_eights', ctx=Load()),
    args=[
        BinOp(
            lineno=23,
            col_offset=56,
            end_lineno=23,
            end_col_offset=65,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 23, columns 45 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
                                             ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=23,
    col_offset=15,
    end_lineno=23,
    end_col_offset=66,
    left=IfExp(
        lineno=23,
        col_offset=16,
        end_lineno=23,
        end_col_offset=41,
        test=...,
        body=...,
        orelse=...,
    ),
    op=Add(),
    right=Call(
        lineno=23,
        col_offset=45,
        end_lineno=23,
        end_col_offset=66,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 23, columns 15 to 66
        return (1 if pos % 10 == 8 else 0) + num_eights(pos // 10)
               ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=27,
    col_offset=6,
    end_lineno=27,
    end_col_offset=39,
    func=Name(lineno=27, col_offset=6, end_lineno=27, end_col_offset=16, id='num_eights', ctx=Load()),
    args=[Constant(lineno=27, col_offset=17, end_lineno=27, end_col_offset=38, value=851803180801223238358, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 27, columns 6 to 39
print(num_eights(851803180801223238358))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
6
Python AST (depth 2)
Call(
    lineno=27,
    col_offset=0,
    end_lineno=27,
    end_col_offset=40,
    func=Name(lineno=27, col_offset=0, end_lineno=27, end_col_offset=5, id='print', ctx=Load()),
    args=[
        Call(
            lineno=27,
            col_offset=6,
            end_lineno=27,
            end_col_offset=39,
            func=...,
            args=[...],
            keywords=[],
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 27, columns 0 to 40
print(num_eights(851803180801223238358))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=27,
    col_offset=0,
    end_lineno=27,
    end_col_offset=40,
    value=Call(
        lineno=27,
        col_offset=0,
        end_lineno=27,
        end_col_offset=40,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 27, columns 0 to 40
print(num_eights(851803180801223238358))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=29,
    col_offset=0,
    end_lineno=33,
    end_col_offset=89,
    name='make_anonymous_factorial',
    args=arguments(posonlyargs=[], args=[], vararg=None, kwonlyargs=[], kw_defaults=[], kwarg=None, defaults=[]),
    body=[
        Expr(
            lineno=30,
            col_offset=4,
            end_lineno=30,
            end_col_offset=68,
            value=...,
        ),
        Return(
            lineno=33,
            col_offset=4,
            end_lineno=33,
            end_col_offset=89,
            value=...,
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 29 to 33
def make_anonymous_factorial():
    """Return the value of an expression that computes factorial."""

    # ??? wtf is a combinator
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Name(lineno=35, col_offset=0, end_lineno=35, end_col_offset=5, id='print', ctx=Load())
--------------------------------------------------
Python Source
Line number 35, columns 0 to 5
print(make_anonymous_factorial()(5))
˜˜˜˜˜
--------------------------------------------------
Result
<built-in function print>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=35, col_offset=6, end_lineno=35, end_col_offset=30, id='make_anonymous_factorial', ctx=Load())
--------------------------------------------------
Python Source
Line number 35, columns 6 to 30
print(make_anonymous_factorial()(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<make_anonymous_factorial function, line 29>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=30, col_offset=4, end_lineno=30, end_col_offset=68, value='Return the value of an expression that computes factorial.', kind=None)
--------------------------------------------------
Python Source
Line number 30, columns 4 to 68
    """Return the value of an expression that computes factorial."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
Return the value of an expression that computes factorial.
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=30,
    col_offset=4,
    end_lineno=30,
    end_col_offset=68,
    value=Constant(lineno=30, col_offset=4, end_lineno=30, end_col_offset=68, value='Return the value of an expression that computes factorial.', kind=None),
)
--------------------------------------------------
Python Source
Line number 30, columns 4 to 68
    """Return the value of an expression that computes factorial."""
    ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Lambda(
    lineno=33,
    col_offset=12,
    end_lineno=33,
    end_col_offset=41,
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=Lambda(
        lineno=33,
        col_offset=23,
        end_lineno=33,
        end_col_offset=40,
        args=...,
        body=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 12 to 41
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
            ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Lambda(
    lineno=33,
    col_offset=43,
    end_lineno=33,
    end_col_offset=88,
    args=arguments(
        posonlyargs=[],
        args=[
            ...,
            ...,
        ],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=IfExp(
        lineno=33,
        col_offset=56,
        end_lineno=33,
        end_col_offset=88,
        test=...,
        body=...,
        orelse=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 43 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Lambda(
    lineno=33,
    col_offset=23,
    end_lineno=33,
    end_col_offset=40,
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=Call(
        lineno=33,
        col_offset=33,
        end_lineno=33,
        end_col_offset=40,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 23 to 40
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                       ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=11,
    end_lineno=33,
    end_col_offset=89,
    func=Lambda(
        lineno=33,
        col_offset=12,
        end_lineno=33,
        end_col_offset=41,
        args=...,
        body=...,
    ),
    args=[
        Lambda(
            lineno=33,
            col_offset=43,
            end_lineno=33,
            end_col_offset=88,
            args=...,
            body=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 11 to 89
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
           ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=35,
    col_offset=6,
    end_lineno=35,
    end_col_offset=32,
    func=Name(lineno=35, col_offset=6, end_lineno=35, end_col_offset=30, id='make_anonymous_factorial', ctx=Load()),
    args=[],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 35, columns 6 to 32
print(make_anonymous_factorial()(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=35, col_offset=33, end_lineno=35, end_col_offset=34, value=5, kind=None)
--------------------------------------------------
Python Source
Line number 35, columns 33 to 34
print(make_anonymous_factorial()(5))
                                 ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=33, end_lineno=33, end_col_offset=34, id='f', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 33 to 34
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                 ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=35, end_lineno=33, end_col_offset=36, id='f', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 35 to 36
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                   ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=38, end_lineno=33, end_col_offset=39, id='x', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 38 to 39
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                      ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 73 to 74
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 77 to 78
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 79 to 80
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                               ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 82 to 83
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜
--------------------------------------------------
Result
5
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 86 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=82,
    end_lineno=33,
    end_col_offset=87,
    left=Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 33, columns 82 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜˜˜˜˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 73 to 74
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 77 to 78
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 79 to 80
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                               ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 82 to 83
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜
--------------------------------------------------
Result
4
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 86 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=82,
    end_lineno=33,
    end_col_offset=87,
    left=Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 33, columns 82 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜˜˜˜˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 73 to 74
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 77 to 78
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 79 to 80
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                               ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 82 to 83
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜
--------------------------------------------------
Result
3
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 86 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=82,
    end_lineno=33,
    end_col_offset=87,
    left=Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 33, columns 82 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 73 to 74
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 77 to 78
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 79 to 80
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                               ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 82 to 83
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 86 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=82,
    end_lineno=33,
    end_col_offset=87,
    left=Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 33, columns 82 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
False
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 73 to 74
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 77 to 78
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 79 to 80
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                               ˜
--------------------------------------------------
Result
<lambda function, line 33>
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 82 to 83
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 86 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                      ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=82,
    end_lineno=33,
    end_col_offset=87,
    left=Name(lineno=33, col_offset=82, end_lineno=33, end_col_offset=83, id='n', ctx=Load()),
    op=Sub(),
    right=Constant(lineno=33, col_offset=86, end_lineno=33, end_col_offset=87, value=1, kind=None),
)
--------------------------------------------------
Python Source
Line number 33, columns 82 to 87
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                                  ˜˜˜˜˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load())
--------------------------------------------------
Python Source
Line number 33, columns 61 to 62
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 66 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                  ˜
--------------------------------------------------
Result
0
--------------------------------------------------
Python AST (depth 2)
Compare(
    lineno=33,
    col_offset=61,
    end_lineno=33,
    end_col_offset=67,
    left=Name(lineno=33, col_offset=61, end_lineno=33, end_col_offset=62, id='n', ctx=Load()),
    ops=[Eq()],
    comparators=[Constant(lineno=33, col_offset=66, end_lineno=33, end_col_offset=67, value=0, kind=None)],
)
--------------------------------------------------
Python Source
Line number 33, columns 61 to 67
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                             ˜˜˜˜˜˜
--------------------------------------------------
Result
True
--------------------------------------------------
Python AST (depth 2)
Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 57
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=77,
    end_lineno=33,
    end_col_offset=88,
    func=Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load()),
        BinOp(
            lineno=33,
            col_offset=82,
            end_lineno=33,
            end_col_offset=87,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 77 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=73,
    end_lineno=33,
    end_col_offset=88,
    left=Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=33,
        col_offset=77,
        end_lineno=33,
        end_col_offset=88,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 73 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=77,
    end_lineno=33,
    end_col_offset=88,
    func=Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load()),
        BinOp(
            lineno=33,
            col_offset=82,
            end_lineno=33,
            end_col_offset=87,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 77 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
1
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=73,
    end_lineno=33,
    end_col_offset=88,
    left=Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=33,
        col_offset=77,
        end_lineno=33,
        end_col_offset=88,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 73 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=77,
    end_lineno=33,
    end_col_offset=88,
    func=Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load()),
        BinOp(
            lineno=33,
            col_offset=82,
            end_lineno=33,
            end_col_offset=87,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 77 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
2
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=73,
    end_lineno=33,
    end_col_offset=88,
    left=Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=33,
        col_offset=77,
        end_lineno=33,
        end_col_offset=88,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 73 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=77,
    end_lineno=33,
    end_col_offset=88,
    func=Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load()),
        BinOp(
            lineno=33,
            col_offset=82,
            end_lineno=33,
            end_col_offset=87,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 77 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
6
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=73,
    end_lineno=33,
    end_col_offset=88,
    left=Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=33,
        col_offset=77,
        end_lineno=33,
        end_col_offset=88,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 73 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=77,
    end_lineno=33,
    end_col_offset=88,
    func=Name(lineno=33, col_offset=77, end_lineno=33, end_col_offset=78, id='g', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=79, end_lineno=33, end_col_offset=80, id='g', ctx=Load()),
        BinOp(
            lineno=33,
            col_offset=82,
            end_lineno=33,
            end_col_offset=87,
            left=...,
            op=...,
            right=...,
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 77 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                             ˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
24
--------------------------------------------------
Python AST (depth 2)
BinOp(
    lineno=33,
    col_offset=73,
    end_lineno=33,
    end_col_offset=88,
    left=Name(lineno=33, col_offset=73, end_lineno=33, end_col_offset=74, id='n', ctx=Load()),
    op=Mult(),
    right=Call(
        lineno=33,
        col_offset=77,
        end_lineno=33,
        end_col_offset=88,
        func=...,
        args=[
            ...,
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 73 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                                         ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
IfExp(
    lineno=33,
    col_offset=56,
    end_lineno=33,
    end_col_offset=88,
    test=Compare(
        lineno=33,
        col_offset=61,
        end_lineno=33,
        end_col_offset=67,
        left=...,
        ops=[...],
        comparators=[...],
    ),
    body=Constant(lineno=33, col_offset=56, end_lineno=33, end_col_offset=57, value=1, kind=None),
    orelse=BinOp(
        lineno=33,
        col_offset=73,
        end_lineno=33,
        end_col_offset=88,
        left=...,
        op=...,
        right=...,
    ),
)
--------------------------------------------------
Python Source
Line number 33, columns 56 to 88
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                                        ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=33,
    col_offset=33,
    end_lineno=33,
    end_col_offset=40,
    func=Name(lineno=33, col_offset=33, end_lineno=33, end_col_offset=34, id='f', ctx=Load()),
    args=[
        Name(lineno=33, col_offset=35, end_lineno=33, end_col_offset=36, id='f', ctx=Load()),
        Name(lineno=33, col_offset=38, end_lineno=33, end_col_offset=39, id='x', ctx=Load()),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 33, columns 33 to 40
    return (lambda f: (lambda x: f(f, x)))(lambda g, n: 1 if n == 0 else n * g(g, n - 1))
                                 ˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
Python AST (depth 2)
Call(
    lineno=35,
    col_offset=6,
    end_lineno=35,
    end_col_offset=35,
    func=Call(
        lineno=35,
        col_offset=6,
        end_lineno=35,
        end_col_offset=32,
        func=...,
        args=[],
        keywords=[],
    ),
    args=[Constant(lineno=35, col_offset=33, end_lineno=35, end_col_offset=34, value=5, kind=None)],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 35, columns 6 to 35
print(make_anonymous_factorial()(5))
      ˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
120
--------------------------------------------------
120
Python AST (depth 2)
Call(
    lineno=35,
    col_offset=0,
    end_lineno=35,
    end_col_offset=36,
    func=Name(lineno=35, col_offset=0, end_lineno=35, end_col_offset=5, id='print', ctx=Load()),
    args=[
        Call(
            lineno=35,
            col_offset=6,
            end_lineno=35,
            end_col_offset=35,
            func=...,
            args=[...],
            keywords=[],
        ),
    ],
    keywords=[],
)
--------------------------------------------------
Python Source
Line number 35, columns 0 to 36
print(make_anonymous_factorial()(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Expr(
    lineno=35,
    col_offset=0,
    end_lineno=35,
    end_col_offset=36,
    value=Call(
        lineno=35,
        col_offset=0,
        end_lineno=35,
        end_col_offset=36,
        func=...,
        args=[
            ...,
        ],
        keywords=[],
    ),
)
--------------------------------------------------
Python Source
Line number 35, columns 0 to 36
print(make_anonymous_factorial()(5))
˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜˜
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=37,
    col_offset=0,
    end_lineno=44,
    end_col_offset=17,
    name='ascending_coin',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        Expr(
            lineno=38,
            col_offset=4,
            end_lineno=38,
            end_col_offset=51,
            value=...,
        ),
        If(
            lineno=39,
            col_offset=4,
            end_lineno=44,
            end_col_offset=17,
            test=...,
            body=[
                ...,
            ],
            orelse=[
                ...,
            ],
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 37 to 44
def ascending_coin(coin):
    """Returns the next ascending coin in order."""
    if coin == 1:
        return 5
    elif coin == 5:
        return 10
    elif coin == 10:
        return 25
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=47,
    col_offset=0,
    end_lineno=54,
    end_col_offset=16,
    name='descending_coin',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        Expr(
            lineno=48,
            col_offset=4,
            end_lineno=48,
            end_col_offset=52,
            value=...,
        ),
        If(
            lineno=49,
            col_offset=4,
            end_lineno=54,
            end_col_offset=16,
            test=...,
            body=[
                ...,
            ],
            orelse=[
                ...,
            ],
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 47 to 54
def descending_coin(coin):
    """Returns the next descending coin in order."""
    if coin == 25:
        return 10
    elif coin == 10:
        return 5
    elif coin == 5:
        return 1
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
FunctionDef(
    lineno=57,
    col_offset=0,
    end_lineno=74,
    end_col_offset=29,
    name='count_coins',
    args=arguments(
        posonlyargs=[],
        args=[...],
        vararg=None,
        kwonlyargs=[],
        kw_defaults=[],
        kwarg=None,
        defaults=[],
    ),
    body=[
        Expr(
            lineno=58,
            col_offset=4,
            end_lineno=63,
            end_col_offset=7,
            value=...,
        ),
        FunctionDef(
            lineno=64,
            col_offset=4,
            end_lineno=73,
            end_col_offset=39,
            name='helper',
            args=...,
            body=[
                ...,
                ...,
                ...,
                ...,
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        Return(
            lineno=74,
            col_offset=4,
            end_lineno=74,
            end_col_offset=29,
            value=...,
        ),
    ],
    decorator_list=[],
    returns=None,
    type_comment=None,
)
--------------------------------------------------
Python Source
Line numbers 57 to 74
def count_coins(change):
    """Return the number of ways to make change using coins of value of 1, 5, 10, 25.
    >>> count_coins(100) # How many ways to make change for a dollar?
    242
    >>> count_coins(200)
    1463
    """
    def helper(amount_remaining, coin):
        if amount_remaining == 0:
            return 1
        if amount_remaining < 0:
            return 0
        if coin == None:
            return 0
        with_coin = helper(amount_remaining - coin, coin)
        without_coin = helper(amount_remaining, descending_coin(coin))
        return with_coin + without_coin
    return helper(change, 25)
--------------------------------------------------
Result
None
--------------------------------------------------
Python AST (depth 2)
Module(
    body=[
        FunctionDef(
            lineno=1,
            col_offset=0,
            end_lineno=4,
            end_col_offset=36,
            name='recursive_fact',
            args=...,
            body=[
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=6,
            col_offset=0,
            end_lineno=11,
            end_col_offset=12,
            name='iterative_fact',
            args=...,
            body=[
                ...,
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        Expr(
            lineno=13,
            col_offset=0,
            end_lineno=13,
            end_col_offset=24,
            value=...,
        ),
        Expr(
            lineno=14,
            col_offset=0,
            end_lineno=14,
            end_col_offset=24,
            value=...,
        ),
        Assert(
            lineno=16,
            col_offset=0,
            end_lineno=16,
            end_col_offset=45,
            test=...,
            msg=None,
        ),
        FunctionDef(
            lineno=19,
            col_offset=0,
            end_lineno=25,
            end_col_offset=16,
            name='num_eights',
            args=...,
            body=[
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        Expr(
            lineno=27,
            col_offset=0,
            end_lineno=27,
            end_col_offset=40,
            value=...,
        ),
        FunctionDef(
            lineno=29,
            col_offset=0,
            end_lineno=33,
            end_col_offset=89,
            name='make_anonymous_factorial',
            args=...,
            body=[
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        Expr(
            lineno=35,
            col_offset=0,
            end_lineno=35,
            end_col_offset=36,
            value=...,
        ),
        FunctionDef(
            lineno=37,
            col_offset=0,
            end_lineno=44,
            end_col_offset=17,
            name='ascending_coin',
            args=...,
            body=[
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=47,
            col_offset=0,
            end_lineno=54,
            end_col_offset=16,
            name='descending_coin',
            args=...,
            body=[
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
        FunctionDef(
            lineno=57,
            col_offset=0,
            end_lineno=74,
            end_col_offset=29,
            name='count_coins',
            args=...,
            body=[
                ...,
                ...,
                ...,
            ],
            decorator_list=[],
            returns=None,
            type_comment=None,
        ),
    ],
    type_ignores=[],
)
--------------------------------------------------
Python Source
<source file>
--------------------------------------------------
Result
None
--------------------------------------------------
